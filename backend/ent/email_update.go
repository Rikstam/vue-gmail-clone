// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gmail-clone-backend/ent/email"
	"gmail-clone-backend/ent/predicate"
	"gmail-clone-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailUpdate is the builder for updating Email entities.
type EmailUpdate struct {
	config
	hooks    []Hook
	mutation *EmailMutation
}

// Where appends a list predicates to the EmailUpdate builder.
func (eu *EmailUpdate) Where(ps ...predicate.Email) *EmailUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetFrom sets the "from" field.
func (eu *EmailUpdate) SetFrom(s string) *EmailUpdate {
	eu.mutation.SetFrom(s)
	return eu
}

// SetSubject sets the "subject" field.
func (eu *EmailUpdate) SetSubject(s string) *EmailUpdate {
	eu.mutation.SetSubject(s)
	return eu
}

// SetBody sets the "body" field.
func (eu *EmailUpdate) SetBody(s string) *EmailUpdate {
	eu.mutation.SetBody(s)
	return eu
}

// SetSentAt sets the "sentAt" field.
func (eu *EmailUpdate) SetSentAt(t time.Time) *EmailUpdate {
	eu.mutation.SetSentAt(t)
	return eu
}

// SetArchived sets the "archived" field.
func (eu *EmailUpdate) SetArchived(b bool) *EmailUpdate {
	eu.mutation.SetArchived(b)
	return eu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableArchived(b *bool) *EmailUpdate {
	if b != nil {
		eu.SetArchived(*b)
	}
	return eu
}

// SetRead sets the "read" field.
func (eu *EmailUpdate) SetRead(b bool) *EmailUpdate {
	eu.mutation.SetRead(b)
	return eu
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableRead(b *bool) *EmailUpdate {
	if b != nil {
		eu.SetRead(*b)
	}
	return eu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *EmailUpdate) SetUserID(id uuid.UUID) *EmailUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eu *EmailUpdate) SetNillableUserID(id *uuid.UUID) *EmailUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EmailUpdate) SetUser(u *User) *EmailUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the EmailMutation object of the builder.
func (eu *EmailUpdate) Mutation() *EmailMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EmailUpdate) ClearUser() *EmailUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmailUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmailUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   email.Table,
			Columns: email.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: email.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: email.FieldFrom,
		})
	}
	if value, ok := eu.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: email.FieldSubject,
		})
	}
	if value, ok := eu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: email.FieldBody,
		})
	}
	if value, ok := eu.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: email.FieldSentAt,
		})
	}
	if value, ok := eu.mutation.Archived(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: email.FieldArchived,
		})
	}
	if value, ok := eu.mutation.Read(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: email.FieldRead,
		})
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EmailUpdateOne is the builder for updating a single Email entity.
type EmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailMutation
}

// SetFrom sets the "from" field.
func (euo *EmailUpdateOne) SetFrom(s string) *EmailUpdateOne {
	euo.mutation.SetFrom(s)
	return euo
}

// SetSubject sets the "subject" field.
func (euo *EmailUpdateOne) SetSubject(s string) *EmailUpdateOne {
	euo.mutation.SetSubject(s)
	return euo
}

// SetBody sets the "body" field.
func (euo *EmailUpdateOne) SetBody(s string) *EmailUpdateOne {
	euo.mutation.SetBody(s)
	return euo
}

// SetSentAt sets the "sentAt" field.
func (euo *EmailUpdateOne) SetSentAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetSentAt(t)
	return euo
}

// SetArchived sets the "archived" field.
func (euo *EmailUpdateOne) SetArchived(b bool) *EmailUpdateOne {
	euo.mutation.SetArchived(b)
	return euo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableArchived(b *bool) *EmailUpdateOne {
	if b != nil {
		euo.SetArchived(*b)
	}
	return euo
}

// SetRead sets the "read" field.
func (euo *EmailUpdateOne) SetRead(b bool) *EmailUpdateOne {
	euo.mutation.SetRead(b)
	return euo
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableRead(b *bool) *EmailUpdateOne {
	if b != nil {
		euo.SetRead(*b)
	}
	return euo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *EmailUpdateOne) SetUserID(id uuid.UUID) *EmailUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableUserID(id *uuid.UUID) *EmailUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EmailUpdateOne) SetUser(u *User) *EmailUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the EmailMutation object of the builder.
func (euo *EmailUpdateOne) Mutation() *EmailMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EmailUpdateOne) ClearUser() *EmailUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmailUpdateOne) Select(field string, fields ...string) *EmailUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Email entity.
func (euo *EmailUpdateOne) Save(ctx context.Context) (*Email, error) {
	var (
		err  error
		node *Email
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Email)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmailUpdateOne) SaveX(ctx context.Context) *Email {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmailUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmailUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmailUpdateOne) sqlSave(ctx context.Context) (_node *Email, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   email.Table,
			Columns: email.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: email.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Email.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, email.FieldID)
		for _, f := range fields {
			if !email.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != email.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: email.FieldFrom,
		})
	}
	if value, ok := euo.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: email.FieldSubject,
		})
	}
	if value, ok := euo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: email.FieldBody,
		})
	}
	if value, ok := euo.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: email.FieldSentAt,
		})
	}
	if value, ok := euo.mutation.Archived(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: email.FieldArchived,
		})
	}
	if value, ok := euo.mutation.Read(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: email.FieldRead,
		})
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Email{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
