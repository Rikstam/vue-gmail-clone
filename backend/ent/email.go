// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gmail-clone-backend/ent/email"
	"gmail-clone-backend/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Email is the model entity for the Email schema.
type Email struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// SentAt holds the value of the "sentAt" field.
	SentAt time.Time `json:"sentAt,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// Read holds the value of the "read" field.
	Read bool `json:"read,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailQuery when eager-loading is set.
	Edges       EmailEdges `json:"edges"`
	user_emails *uuid.UUID
}

// EmailEdges holds the relations/edges for other nodes in the graph.
type EmailEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Email) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case email.FieldArchived, email.FieldRead:
			values[i] = new(sql.NullBool)
		case email.FieldID:
			values[i] = new(sql.NullInt64)
		case email.FieldFrom, email.FieldSubject, email.FieldBody:
			values[i] = new(sql.NullString)
		case email.FieldSentAt:
			values[i] = new(sql.NullTime)
		case email.ForeignKeys[0]: // user_emails
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Email", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Email fields.
func (e *Email) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case email.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case email.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				e.From = value.String
			}
		case email.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				e.Subject = value.String
			}
		case email.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				e.Body = value.String
			}
		case email.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sentAt", values[i])
			} else if value.Valid {
				e.SentAt = value.Time
			}
		case email.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				e.Archived = value.Bool
			}
		case email.FieldRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field read", values[i])
			} else if value.Valid {
				e.Read = value.Bool
			}
		case email.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_emails", values[i])
			} else if value.Valid {
				e.user_emails = new(uuid.UUID)
				*e.user_emails = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Email entity.
func (e *Email) QueryUser() *UserQuery {
	return (&EmailClient{config: e.config}).QueryUser(e)
}

// Update returns a builder for updating this Email.
// Note that you need to call Email.Unwrap() before calling this method if this Email
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Email) Update() *EmailUpdateOne {
	return (&EmailClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Email entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Email) Unwrap() *Email {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Email is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Email) String() string {
	var builder strings.Builder
	builder.WriteString("Email(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("from=")
	builder.WriteString(e.From)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(e.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(e.Body)
	builder.WriteString(", ")
	builder.WriteString("sentAt=")
	builder.WriteString(e.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", e.Archived))
	builder.WriteString(", ")
	builder.WriteString("read=")
	builder.WriteString(fmt.Sprintf("%v", e.Read))
	builder.WriteByte(')')
	return builder.String()
}

// Emails is a parsable slice of Email.
type Emails []*Email

func (e Emails) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
